import Style from "../design/style.js";
import Position from "../design/Position.js";
export default class Pack {
    private canvas;
    private ctx;
    private canvasId;
    disableOpacity: boolean;
    constructor(canvasId: string, screenWidthInPercent?: number);
    private getNewCtx;
    drawBackground(color?: string): string;
    canvasWidth(): number;
    canvasHeight(): number;
    quadraticCurveTo(start: Position, end: Position, controlPoint: Position, style: Style): void;
    restore(): void;
    save(): void;
    drawImage(image: HTMLImageElement, x: number, y: number, width: number, height: number): void;
    drawImageSrcDest(image: HTMLImageElement, sourceX: number, sourceY: number, sourceWidth: number, sourceHeight: number, destX: number, destY: number, destWidth: number, destHeight: number): void;
    clearCanvas(): void;
    charsWidth(chars: string, fontSize: number, fontName: string): number;
    drawLine(startX: number, startY: number, endX: number, endY: number, incomTempl: Style): void;
    line(startX: number, startY: number, endX: number, endY: number): void;
    beginPath(): void;
    closePath(): void;
    moveTo(x: number, y: number): void;
    lineTo(x: number, y: number, style: Style): void;
    fill(style: Style): void;
    stroke(): void;
    drawRect(x: number, y: number, width: number, height: number, incomCtx: Style): void;
    drawFillRect(x: number, y: number, width: number, height: number, incomCtx: Style): void;
    arcTo(start: Position, end: Position, style: Style, radius?: number): void;
    drawCircle(x: number | undefined, y: number | undefined, radius: number | undefined, fill: boolean | undefined, startAngle: number | undefined, endAngle: number | undefined, incomCtx: Style): void;
    textBaseline(opt: string): void;
    drawText(content: string, x: number, y: number, incomCtx: Style): void;
    drawIcon(code: number, x: number, y: number, incomCtx: Style): void;
    drawTextstroke(content: string, x: number, y: number, incomCtx: Style): void;
    commitCtxData(incomCtx: Style): void;
    private setFont;
    xPerc(perc: number): number;
    pixToXPerc(pix: number): number;
    pixToYPerc(pix: number): number;
    yPerc(perc: number): number;
    private setBwZeroNhundred;
    dynCanvasWidth(widthInPercent?: number): number;
    dynCanvasHeight(widthInPix: number, heightInPercent?: number | null): number;
    resizeCanvas(width: number, height: number | null): void;
    dynamicCanvas(widthInPercent?: number, heightInPercent?: number | null): boolean;
    rotate(degrees: number, reverse?: boolean): void;
    translate(x: number, y: number): void;
    setTransform(a?: number, b?: number, c?: number, d?: number, e?: number, f?: number): void;
}
//# sourceMappingURL=pack.d.ts.map